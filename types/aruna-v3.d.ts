/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/api/v3/global/components": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new component */
    post: operations["create_component"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/global/relation_variant": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new relation variant */
    post: operations["create_relation_variant"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/global/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get relation info */
    get: operations["get_relation_infos"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new group */
    post: operations["create_group"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/groups/{group_id}/user/{user_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Add user to group */
    patch: operations["add_user"];
    trace?: never;
  };
  "/api/v3/groups/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get group by id */
    get: operations["get_group"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/groups/{id}/join": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Request user join group */
    post: operations["request_user_access_group"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/groups/{id}/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get users from group */
    get: operations["get_group_users"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/info/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get events information */
    get: operations["get_events"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/info/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Search for resources */
    get: operations["search"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/info/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get global server stats */
    get: operations["get_stats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/realms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new realm */
    post: operations["create_realm"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/realms/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get realm */
    get: operations["get_realm"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/realms/{id}/access": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Request group join realm */
    post: operations["request_group_access_realm"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/realms/{id}/components": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get components of a realm (server, dataproxies, etc) */
    get: operations["get_realm_components"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/realms/{id}/components/{component_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Add a component to a realm (dataproxies, etc) */
    patch: operations["add_component_to_realm"];
    trace?: never;
  };
  "/api/v3/realms/{id}/groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get groups from realm */
    get: operations["get_realm_groups"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/realms/{id}/groups/{group_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Add group to realm */
    patch: operations["add_group"];
    trace?: never;
  };
  "/api/v3/resources": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get resources */
    get: operations["get_resource"];
    put?: never;
    /** Create a new resource */
    post: operations["create_resource"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/authors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update resource authors */
    post: operations["update_resource_authors"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/batch": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new resource */
    post: operations["create_resource_batch"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/description": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update resource description */
    post: operations["update_resource_description"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/identifiers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update resource identifiers */
    post: operations["update_resource_identifiers"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/labels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update resource labels */
    post: operations["update_resource_labels"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/license": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update resource license */
    post: operations["update_resource_license"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/name": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update resource name */
    post: operations["update_resource_name"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new resource */
    post: operations["create_project"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new relation */
    post: operations["create_relation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update resource title */
    post: operations["update_resource_title"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/visibility": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update resource visiblity */
    post: operations["update_resource_visibility"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Register data for an object */
    delete: operations["delete_resource"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/{id}/authorize": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Register data for an object */
    get: operations["authorize_resource"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/{id}/data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register data for an object */
    post: operations["register_data"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/resources/{id}/relations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get relations of a resource */
    get: operations["get_relations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current user */
    get: operations["get_user"];
    put?: never;
    /** Register a new user */
    post: operations["register_user"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/users/groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all groups from the current user */
    get: operations["get_user_groups"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/users/realms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all realms from the current user */
    get: operations["get_user_realms"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/users/s3credentials": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List all tokens from the current user */
    get: operations["get_s3_credentials"];
    put?: never;
    /** Create a s3credential */
    post: operations["create_s3_credential"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v3/users/tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List all tokens from the current user */
    get: operations["get_tokens"];
    put?: never;
    /** Create a token */
    post: operations["create_token"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
};
export type webhooks = Record<string, never>;
export type components = {
  schemas: {
    AddComponentToRealmResponse: Record<string, never>;
    AddGroupRequest: {
      /** Format: ulid */
      group_id: string;
      /** Format: ulid */
      realm_id: string;
    };
    AddGroupResponse: Record<string, never>;
    AddUserResponse: Record<string, never>;
    Author: {
      email: string;
      first_name: string;
      /** Format: ulid */
      id: string;
      identifier: string;
      last_name: string;
    };
    BatchResource: {
      authors?: components["schemas"]["Author"][];
      description?: string;
      identifiers?: string[];
      labels?: components["schemas"]["KeyValue"][];
      license_tag?: string;
      name: string;
      parent: components["schemas"]["Parent"];
      title?: string;
      variant: components["schemas"]["ResourceVariant"];
      visibility?: components["schemas"]["VisibilityClass"];
    };
    Component: {
      component_type: components["schemas"]["ComponentType"];
      deleted: boolean;
      description: string;
      endpoints: components["schemas"]["Endpoint"][];
      /** Format: ulid */
      id: string;
      name: string;
      public: boolean;
    };
    /** @enum {string} */
    ComponentType: ComponentType;
    Constraints: Record<string, never>;
    CreateComponentRequest: {
      component_type: components["schemas"]["ComponentType"];
      description: string;
      endpoints: components["schemas"]["Endpoint"][];
      name: string;
      pubkey: string;
      public: boolean;
    };
    CreateComponentResponse: {
      component: components["schemas"]["Component"];
    };
    CreateGroupRequest: {
      description: string;
      name: string;
    };
    CreateGroupResponse: {
      group: components["schemas"]["Group"];
    };
    CreateProjectRequest: {
      authors?: components["schemas"]["Author"][];
      /** Format: ulid */
      data_endpoint?: string | null;
      description?: string;
      /** Format: ulid */
      group_id?: string;
      identifiers?: string[];
      labels?: components["schemas"]["KeyValue"][];
      license_tag?: string;
      name: string;
      /** Format: ulid */
      realm_id?: string;
      title?: string;
      visibility?: components["schemas"]["VisibilityClass"];
    };
    CreateProjectResponse: {
      resource: components["schemas"]["Resource"];
    };
    CreateRealmRequest: {
      description: string;
      name: string;
      tag: string;
    };
    CreateRealmResponse: {
      /** Format: ulid */
      admin_group_id: string;
      realm: components["schemas"]["Realm"];
    };
    CreateRelationRequest: {
      /** Format: ulid */
      source: string;
      /** Format: ulid */
      target: string;
      /** Format: int32 */
      variant: number;
    };
    CreateRelationResponse: Record<string, never>;
    CreateRelationVariantRequest: {
      backward_type: string;
      forward_type: string;
    };
    CreateRelationVariantResponse: {
      /** Format: int32 */
      idx: number;
    };
    CreateResourceBatchRequest: {
      resources: components["schemas"]["BatchResource"][];
    };
    CreateResourceRequest: {
      authors?: components["schemas"]["Author"][];
      description?: string;
      identifiers?: string[];
      labels?: components["schemas"]["KeyValue"][];
      license_tag?: string;
      name: string;
      /** Format: ulid */
      parent_id: string;
      title?: string;
      variant: components["schemas"]["ResourceVariant"];
      visibility?: components["schemas"]["VisibilityClass"];
    };
    CreateResourceResponse: {
      resource: components["schemas"]["Resource"];
    };
    CreateS3CredentialsRequest: {
      /** Format: ulid */
      component_id: string;
      /** Format: date-time */
      expires_at?: string | null;
      /** Format: ulid */
      group_id: string;
      name: string;
      /** Format: ulid */
      realm_id: string;
      scope?: components["schemas"]["Scope"];
    };
    CreateS3CredentialsResponse: {
      access_key: string;
      /** Format: ulid */
      component_id: string;
      secret_key: string;
      token: components["schemas"]["Token"];
    };
    CreateTokenRequest: {
      /** Format: date-time */
      expires_at?: string | null;
      /** Format: ulid */
      group_id?: string | null;
      name: string;
      /** Format: ulid */
      realm_id?: string | null;
      scope?: components["schemas"]["Scope"];
    };
    CreateTokenResponse: {
      secret: string;
      token: components["schemas"]["Token"];
    };
    DataLocation: {
      /** Format: ulid */
      endpoint_id: string;
      status: components["schemas"]["SyncingStatus"];
    };
    /** @enum {string} */
    Direction: Direction;
    Endpoint: {
      /** Format: uri */
      S3: string;
    } | {
      /** Format: uri */
      Json: string;
    } | {
      /** Format: uri */
      Grpc: string;
    } | {
      /** Format: uri */
      Consensus: string;
    };
    GenericNode: (components["schemas"]["Resource"] & {
      /** @enum {string} */
      type: GenericNodeType;
    }) | (components["schemas"]["User"] & {
      /** @enum {string} */
      type: GenericNodeType;
    }) | (components["schemas"]["ServiceAccount"] & {
      /** @enum {string} */
      type: GenericNodeType;
    }) | (components["schemas"]["Group"] & {
      /** @enum {string} */
      type: GenericNodeType;
    }) | (components["schemas"]["Realm"] & {
      /** @enum {string} */
      type: GenericNodeType;
    }) | (components["schemas"]["Component"] & {
      /** @enum {string} */
      type: GenericNodeType;
    });
    GetEventsResponse: {
      events: {
        [key: string]: unknown;
      }[];
    };
    GetGroupResponse: {
      group: components["schemas"]["Group"];
    };
    GetGroupsFromRealmResponse: {
      groups: components["schemas"]["Group"][];
    };
    GetGroupsFromUserResponse: {
      groups: [
        {
          deleted: boolean;
          description: string;
          /** Format: ulid */
          id: string;
          name: string;
        },
        GetGroupsFromUserResponseGroups
      ][];
    };
    GetRealmComponentsResponse: {
      components: components["schemas"]["Component"][];
    };
    GetRealmResponse: {
      realm: components["schemas"]["Realm"];
    };
    GetRealmsFromUserResponse: {
      realms: components["schemas"]["Realm"][];
    };
    GetRelationInfosResponse: {
      relation_infos: components["schemas"]["RelationInfo"][];
    };
    GetRelationsResponse: {
      offset?: number | null;
      relations: components["schemas"]["Relation"][];
    };
    GetResourcesResponse: {
      resources: components["schemas"]["Resource"][];
    };
    GetS3CredentialsResponse: {
      tokens: components["schemas"]["S3Credential"][];
    };
    GetStatsResponse: {
      projects: number;
      realms: number;
      resources: number;
      storage: number;
      users: number;
    };
    GetTokensResponse: {
      tokens: components["schemas"]["Token"][];
    };
    GetUserResponse: {
      user: components["schemas"]["User"];
    };
    GetUsersFromGroupResponse: {
      users: components["schemas"]["User"][];
    };
    Group: {
      deleted: boolean;
      description: string;
      /** Format: ulid */
      id: string;
      name: string;
    };
    GroupAccessRealmResponse: Record<string, never>;
    Hash: {
      algorithm: components["schemas"]["HashAlgorithm"];
      value: string;
    };
    /** @enum {string} */
    HashAlgorithm: HashAlgorithm;
    KeyValue: {
      key: string;
      locked: boolean;
      value: string;
    };
    Parent: {
      /** Format: ulid */
      ID: string;
    } | {
      /** Format: int32 */
      Idx: number;
    };
    /** @enum {string} */
    Permission: Permission;
    Realm: {
      deleted: boolean;
      description: string;
      /** Format: ulid */
      id: string;
      name: string;
      tag: string;
    };
    RegisterDataRequest: {
      /** Format: ulid */
      component_id: string;
      hashes: components["schemas"]["Hash"][];
      /** Format: ulid */
      object_id?: string;
    };
    RegisterDataResponse: Record<string, never>;
    RegisterUserRequest: {
      email: string;
      first_name: string;
      identifier: string;
      last_name: string;
    };
    RegisterUserResponse: {
      user: components["schemas"]["User"];
    };
    Relation: {
      /** Format: ulid */
      from_id: string;
      relation_type: string;
      /** Format: ulid */
      to_id: string;
    };
    RelationInfo: {
      backward_type: string;
      forward_type: string;
      idx: components["schemas"]["u32"];
      internal: boolean;
    };
    Resource: {
      authors: components["schemas"]["Author"][];
      /** Format: int64 */
      content_len: number;
      /** Format: int64 */
      count: number;
      /** Format: date-time */
      created_at: string;
      deleted: boolean;
      description: string;
      hashes: components["schemas"]["Hash"][];
      /** Format: ulid */
      id: string;
      identifiers: string[];
      labels: components["schemas"]["KeyValue"][];
      /** Format: date-time */
      last_modified: string;
      license_tag: string;
      location: components["schemas"]["DataLocation"][];
      locked: boolean;
      name: string;
      /** Format: int64 */
      revision: number;
      title: string;
      variant: components["schemas"]["ResourceVariant"];
      visibility: components["schemas"]["VisibilityClass"];
    };
    /** @enum {string} */
    ResourceVariant: ResourceVariant;
    S3Credential: {
      access_key: string;
      token_info: components["schemas"]["Token"];
    };
    Scope: Scope | {
      Ressource: {
        permission: components["schemas"]["Permission"];
        /** Format: ulid */
        resource_id: string;
      };
    };
    SearchResponse: {
      expected_hits: number;
      resources: components["schemas"]["GenericNode"][];
    };
    ServiceAccount: {
      deleted: boolean;
      /** Format: ulid */
      id: string;
      name: string;
    };
    /** @enum {string} */
    SyncingStatus: SyncingStatus;
    Token: {
      /** Format: ulid */
      component_id?: string | null;
      constraints?: null | components["schemas"]["Constraints"];
      /** Format: ulid */
      default_group?: string | null;
      /** Format: ulid */
      default_realm?: string | null;
      /** Format: date-time */
      expires_at: string;
      /** Format: int32 */
      id: number;
      name: string;
      scope: components["schemas"]["Scope"];
      token_type: components["schemas"]["TokenType"];
      /** Format: ulid */
      user_id: string;
    };
    /** @enum {string} */
    TokenType: TokenType;
    UpdateResourceAuthorsRequest: {
      authors_to_add: components["schemas"]["Author"][];
      authors_to_remove: components["schemas"]["Author"][];
      /** Format: ulid */
      id: string;
    };
    UpdateResourceAuthorsResponse: {
      resource: components["schemas"]["Resource"];
    };
    UpdateResourceDescriptionRequest: {
      description: string;
      /** Format: ulid */
      id: string;
    };
    UpdateResourceDescriptionResponse: {
      resource: components["schemas"]["Resource"];
    };
    UpdateResourceIdentifiersRequest: {
      /** Format: ulid */
      id: string;
      ids_to_add: string[];
      ids_to_remove: string[];
    };
    UpdateResourceIdentifiersResponse: {
      resource: components["schemas"]["Resource"];
    };
    UpdateResourceLabelsRequest: {
      /** Format: ulid */
      id: string;
      labels_to_add: components["schemas"]["KeyValue"][];
      labels_to_remove: components["schemas"]["KeyValue"][];
    };
    UpdateResourceLabelsResponse: {
      resource: components["schemas"]["Resource"];
    };
    UpdateResourceLicenseRequest: {
      /** Format: ulid */
      id: string;
      license_tag: string;
    };
    UpdateResourceLicenseResponse: {
      resource: components["schemas"]["Resource"];
    };
    UpdateResourceNameRequest: {
      /** Format: ulid */
      id: string;
      name: string;
    };
    UpdateResourceNameResponse: {
      resource: components["schemas"]["Resource"];
    };
    UpdateResourceTitleRequest: {
      /** Format: ulid */
      id: string;
      title: string;
    };
    UpdateResourceTitleResponse: {
      resource: components["schemas"]["Resource"];
    };
    UpdateResourceVisibilityRequest: {
      /** Format: ulid */
      id: string;
      visibility: components["schemas"]["VisibilityClass"];
    };
    UpdateResourceVisibilityResponse: {
      resource: components["schemas"]["Resource"];
    };
    User: {
      deleted: boolean;
      email: string;
      first_name: string;
      global_admin: boolean;
      /** Format: ulid */
      id: string;
      identifiers: string;
      last_name: string;
    };
    UserAccessGroupResponse: Record<string, never>;
    /** @enum {string} */
    VisibilityClass: VisibilityClass;
    /** Format: int32 */
    u32: number;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};
export type $defs = Record<string, never>;

export interface operations {
  create_component: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateComponentRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateComponentResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_relation_variant: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRelationVariantRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateRelationVariantResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_relation_infos: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetRelationInfosResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_group: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateGroupResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  add_user: {
    parameters: {
      query: {
        /** @description Permission */
        permission: components["schemas"]["Permission"];
      };
      header?: never;
      path: {
        /** @description Group ID */
        group_id: string;
        /** @description User ID */
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AddUserResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_group: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Realm ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetGroupResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  request_user_access_group: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Group ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserAccessGroupResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_group_users: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Group ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetUsersFromGroupResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_events: {
    parameters: {
      query: {
        subscriber_id: string;
        acknowledge_from?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetEventsResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  search: {
    parameters: {
      query?: {
        query?: string;
        filter?: string | null;
        limit?: number | null;
        offset?: number | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SearchResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_stats: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetStatsResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_realm: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRealmRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateRealmResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_realm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Realm ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetRealmResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  request_group_access_realm: {
    parameters: {
      query: {
        /** @description Group ID */
        group_id: string;
      };
      header?: never;
      path: {
        /** @description Realm ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GroupAccessRealmResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_realm_components: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Realm ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetRealmComponentsResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  add_component_to_realm: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Realm ID */
        id: string;
        /** @description Component ID */
        component_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AddComponentToRealmResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_realm_groups: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Realm ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetGroupsFromRealmResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  add_group: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Realm ID */
        id: string;
        /** @description Group ID */
        group_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddGroupRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AddGroupResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_resource: {
    parameters: {
      query: {
        ids: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetResourcesResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_resource: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateResourceRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateResourceResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  update_resource_authors: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceAuthorsRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateResourceAuthorsResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_resource_batch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateResourceBatchRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateResourceResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  update_resource_description: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceDescriptionRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateResourceDescriptionResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  update_resource_identifiers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceIdentifiersRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateResourceIdentifiersResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  update_resource_labels: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceLabelsRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateResourceLabelsResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  update_resource_license: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceLicenseRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateResourceLicenseResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  update_resource_name: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceNameRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateResourceNameResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_project: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateProjectResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_relation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRelationRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateRelationResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  update_resource_title: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceTitleRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateResourceTitleResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  update_resource_visibility: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceVisibilityRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateResourceVisibilityResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  delete_resource: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Resource ID (Must be object) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  authorize_resource: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Resource ID (Must be object) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  register_data: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Resource ID (Must be object) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterDataRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RegisterDataResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_relations: {
    parameters: {
      query?: {
        /** @description Direction of relation */
        direction?: null | components["schemas"]["Direction"];
        /** @description Filter relations by index */
        filter?: number[] | null;
        /** @description Offset for pagination */
        offset?: number | null;
        /** @description Page size for pagination */
        page_size?: number | null;
      };
      header?: never;
      path: {
        /** @description Resource ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetRelationsResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_user: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetUserResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  register_user: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterUserRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RegisterUserResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_user_groups: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetGroupsFromUserResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_user_realms: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetRealmsFromUserResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_s3_credentials: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetS3CredentialsResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_s3_credential: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateS3CredentialsRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateS3CredentialsResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  get_tokens: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetTokensResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
  create_token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTokenRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateTokenResponse"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            error: string;
            name: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
    };
  };
}
